# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import docx
from docx.enum.text import WD_COLOR_INDEX
import aspose.words as aw
from os import mkdir, remove, rmdir

def SpilitPages(doc_spilit):
    mkdir("wordcount")
    pageCount = doc_spilit.page_count
    for page in range(0, pageCount):
        extractedPage = doc_spilit.extract_pages(page, 1)
        extractedPage.save(f"./wordcount/wordcount_page{page + 1}.docx")
    return pageCount

def HighlightCounter(doc, color):
    words = []
    words_arrey = []
    words_count = 0
    for paragraph in doc.paragraphs:
        highlight = ""
        is_count = False
        for run in paragraph.runs:
            if is_count == False and highlight != "" and highlight[-1] != " ":
                highlight += " "
            if run.font.highlight_color ==  color:
                highlight += run.text
                is_count = True
            else:
                is_count = False
        if highlight:
            words.append(highlight)
    for i in range(len(words)):
        words_arrey += words[i].split(" ")
    words_arrey = list(filter(None, words_arrey))
    words_count = len(words_arrey)
    return words_count

def AllWordsCounter(doc):
    words = []
    words_arrey = []
    words_count = 0
    for paragraph in doc.paragraphs:
        word = ""
        for run in paragraph.runs:
            word += run.text
        if word:
            words.append(word)
    for i in range(len(words)):
        words_arrey += words[i].split(" ")
    words_arrey = list(filter(None, words_arrey))
    words_count = len(words_arrey)
    return words_count

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(643, 493)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.address = QtWidgets.QLineEdit(self.centralwidget)
        self.address.setGeometry(QtCore.QRect(100, 20, 541, 20))
        self.address.setObjectName("address")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.yellow = QtWidgets.QCheckBox(self.centralwidget)
        self.yellow.setGeometry(QtCore.QRect(10, 100, 70, 17))
        self.yellow.setObjectName("yellow")
        self.red = QtWidgets.QCheckBox(self.centralwidget)
        self.red.setGeometry(QtCore.QRect(10, 120, 70, 17))
        self.red.setObjectName("red")
        self.green = QtWidgets.QCheckBox(self.centralwidget)
        self.green.setGeometry(QtCore.QRect(10, 140, 70, 17))
        self.green.setObjectName("green")
        self.blue = QtWidgets.QCheckBox(self.centralwidget)
        self.blue.setGeometry(QtCore.QRect(10, 160, 70, 17))
        self.blue.setObjectName("blue")
        self.cyan = QtWidgets.QCheckBox(self.centralwidget)
        self.cyan.setGeometry(QtCore.QRect(10, 220, 70, 17))
        self.cyan.setObjectName("cyan")
        self.pink = QtWidgets.QCheckBox(self.centralwidget)
        self.pink.setGeometry(QtCore.QRect(10, 200, 70, 17))
        self.pink.setObjectName("pink")
        self.gray = QtWidgets.QCheckBox(self.centralwidget)
        self.gray.setGeometry(QtCore.QRect(10, 180, 70, 17))
        self.gray.setObjectName("gray")
        self.dyellow = QtWidgets.QCheckBox(self.centralwidget)
        self.dyellow.setGeometry(QtCore.QRect(10, 320, 70, 17))
        self.dyellow.setObjectName("dyellow")
        self.dred = QtWidgets.QCheckBox(self.centralwidget)
        self.dred.setGeometry(QtCore.QRect(10, 300, 70, 17))
        self.dred.setObjectName("dred")
        self.dblue = QtWidgets.QCheckBox(self.centralwidget)
        self.dblue.setGeometry(QtCore.QRect(10, 280, 70, 17))
        self.dblue.setObjectName("dblue")
        self.white = QtWidgets.QCheckBox(self.centralwidget)
        self.white.setGeometry(QtCore.QRect(10, 240, 70, 17))
        self.white.setObjectName("white")
        self.black = QtWidgets.QCheckBox(self.centralwidget)
        self.black.setGeometry(QtCore.QRect(10, 260, 70, 17))
        self.black.setObjectName("black")
        self.dpink = QtWidgets.QCheckBox(self.centralwidget)
        self.dpink.setGeometry(QtCore.QRect(10, 400, 101, 17))
        self.dpink.setObjectName("dpink")
        self.dcyan = QtWidgets.QCheckBox(self.centralwidget)
        self.dcyan.setGeometry(QtCore.QRect(10, 380, 70, 17))
        self.dcyan.setObjectName("dcyan")
        self.dgreen = QtWidgets.QCheckBox(self.centralwidget)
        self.dgreen.setGeometry(QtCore.QRect(10, 360, 91, 17))
        self.dgreen.setObjectName("dgreen")
        self.dgray = QtWidgets.QCheckBox(self.centralwidget)
        self.dgray.setGeometry(QtCore.QRect(10, 340, 70, 17))
        self.dgray.setObjectName("dgray")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 341, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.calculate_btn = QtWidgets.QPushButton(self.centralwidget)
        self.calculate_btn.setGeometry(QtCore.QRect(10, 430, 311, 23))
        self.calculate_btn.setObjectName("calculate_btn")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(340, 70, 341, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.output = QtWidgets.QTextBrowser(self.centralwidget)
        self.output.setGeometry(QtCore.QRect(340, 111, 291, 341))
        self.output.setObjectName("output")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 643, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.calculate_btn.clicked.connect(self.Counter) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Word Count"))
        self.label.setText(_translate("MainWindow", "Path of file:"))
        self.yellow.setText(_translate("MainWindow", "Yellow"))
        self.red.setText(_translate("MainWindow", "Red"))
        self.green.setText(_translate("MainWindow", "Green"))
        self.blue.setText(_translate("MainWindow", "Blue"))
        self.cyan.setText(_translate("MainWindow", "Cyan "))
        self.pink.setText(_translate("MainWindow", "Pink"))
        self.gray.setText(_translate("MainWindow", "Gray"))
        self.dyellow.setText(_translate("MainWindow", "Dark Yellow"))
        self.dred.setText(_translate("MainWindow", "Dark Red"))
        self.dblue.setText(_translate("MainWindow", "Dark Blue"))
        self.white.setText(_translate("MainWindow", "White "))
        self.black.setText(_translate("MainWindow", "Black"))
        self.dpink.setText(_translate("MainWindow", "Dark Pink"))
        self.dcyan.setText(_translate("MainWindow", "Dark Cyan"))
        self.dgreen.setText(_translate("MainWindow", "Dark Green"))
        self.dgray.setText(_translate("MainWindow", "Dark Gray"))
        self.label_2.setText(_translate("MainWindow", "Check the coloers want to calculate"))
        self.calculate_btn.setText(_translate("MainWindow", "Calculate"))
        self.label_3.setText(_translate("MainWindow", "Statistics"))
    
    def Counter(self):
        self.output.append("Counting...")
        try:
            address = self.address.text()
            doc = docx.Document(address)
            all_words = AllWordsCounter(doc=doc)
            other_words = all_words
            output_string = "All words: " + str(all_words) + "\n"
            self.output.append(output_string)

            if self.yellow.isChecked():
                color = WD_COLOR_INDEX.YELLOW
                yellow_words = HighlightCounter(doc=doc, color=color)
                output_string = "Yellow highlighted words: " +  str(yellow_words) + "\nAnd it's " + str((yellow_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= yellow_words

            if self.red.isChecked():
                color = WD_COLOR_INDEX.RED
                red_words = HighlightCounter(doc=doc, color=color)
                output_string = "Red highlighted words: " +  str(red_words) + "\nAnd it's " + str((red_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= red_words

            if self.green.isChecked():
                color = WD_COLOR_INDEX.BRIGHT_GREEN
                green_words = HighlightCounter(doc=doc, color=color)
                output_string = "Green highlighted words: " +  str(green_words) + "\nAnd it's " + str((green_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= green_words    

            if self.blue.isChecked():
                color = WD_COLOR_INDEX.BLUE
                blue_words = HighlightCounter(doc=doc, color=color)
                output_string = "Blue highlighted words: " +  str(blue_words) + "\nAnd it's " + str((blue_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= blue_words    

            if self.gray.isChecked():
                color = WD_COLOR_INDEX.GRAY_25
                gray_words = HighlightCounter(doc=doc, color=color)
                output_string = "Gray highlighted words: " +  str(gray_words) + "\nAnd it's " + str((gray_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= gray_words    

            if self.pink.isChecked():
                color = WD_COLOR_INDEX.PINK
                pink_words = HighlightCounter(doc=doc, color=color)
                output_string = "Pink highlighted words: " +  str(pink_words) + "\nAnd it's " + str((pink_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= pink_words    

            if self.cyan.isChecked():
                color = WD_COLOR_INDEX.TURQUOISE
                cyan_words = HighlightCounter(doc=doc, color=color)
                output_string = "Cyan highlighted words: " +  str(cyan_words) + "\nAnd it's " + str((cyan_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= cyan_words    

            if self.white.isChecked():
                color = WD_COLOR_INDEX.WHITE
                white_words = HighlightCounter(doc=doc, color=color)
                output_string = "White highlighted words: " +  str(white_words) + "\nAnd it's " + str((white_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= white_words    

            if self.black.isChecked():
                color = WD_COLOR_INDEX.BLACK
                black_words = HighlightCounter(doc=doc, color=color)
                output_string = "Black highlighted words: " +  str(black_words) + "\nAnd it's " + str((black_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= black_words    

            if self.dblue.isChecked():
                color = WD_COLOR_INDEX.DARK_BLUE
                dblue_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark blue highlighted words: " +  str(dblue_words) + "\nAnd it's " + str((dblue_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dblue_words    

            if self.dred.isChecked():
                color = WD_COLOR_INDEX.DARK_RED
                dred_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark red highlighted words: " +  str(dred_words) + "\nAnd it's " + str((dred_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dred_words    

            if self.dyellow.isChecked():
                color = WD_COLOR_INDEX.DARK_YELLOW
                dyellow_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark yellow highlighted words: " +  str(dyellow_words) + "\nAnd it's " + str((dyellow_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dyellow_words    

            if self.dgray.isChecked():
                color = WD_COLOR_INDEX.GRAY_50
                dgray_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark gray highlighted words: " +  str(dgray_words) + "\nAnd it's " + str((dgray_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dgray_words    

            if self.dgreen.isChecked():
                color = WD_COLOR_INDEX.GREEN
                dgreen_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark green highlighted words: " +  str(dgreen_words) + "\nAnd it's " + str((dgreen_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dgreen_words    

            if self.dcyan.isChecked():
                color = WD_COLOR_INDEX.TEAL
                dcyan_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark cyan highlighted words: " +  str(dcyan_words) + "\nAnd it's " + str((dcyan_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dcyan_words    

            if self.dpink.isChecked():
                color = WD_COLOR_INDEX.VIOLET
                dpink_words = HighlightCounter(doc=doc, color=color)
                output_string = "Dark pink highlighted words: " +  str(dpink_words) + "\nAnd it's " + str((dpink_words*100)/all_words) + "% " + "of all words!\n"
                self.output.append(output_string)
                other_words -= dpink_words    

            output_string = "Other words: " +  str(other_words) + "\nAnd it's " + str((other_words*100)/all_words) + "% " + "of all words!\n"
            self.output.append(output_string)
            doc_spilit = aw.Document(address)
            page_count = SpilitPages(doc_spilit=doc_spilit)
            for i in range(page_count):
                self.output.append("-------------------------------------")
                doc = docx.Document(f"./wordcount/wordcount_page{i + 1}.docx")
                all_words = AllWordsCounter(doc=doc) - 10 #this is for this paragraph who make automatically with aspose.words --> "Evaluation Only. Created with Aspose.Words. Copyright 2003-2023 Aspose Pty Ltd."
                other_words = all_words
                output_string = f"All words in page {i + 1}: {all_words}\n"
                self.output.append(output_string)

                if self.yellow.isChecked():
                    color = WD_COLOR_INDEX.YELLOW
                    yellow_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Yellow highlighted words in page {i + 1}: {yellow_words}\nAnd it's {(yellow_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= yellow_words

                if self.red.isChecked():
                    color = WD_COLOR_INDEX.RED
                    red_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Red highlighted words in page {i + 1}: {red_words}\nAnd it's {(red_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= red_words

                if self.green.isChecked():
                    color = WD_COLOR_INDEX.BRIGHT_GREEN
                    green_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Green highlighted words in page {i + 1}: {green_words}\nAnd it's {(green_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= green_words    

                if self.blue.isChecked():
                    color = WD_COLOR_INDEX.BLUE
                    blue_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Blue highlighted words in page {i + 1}: {blue_words}\nAnd it's {(blue_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= blue_words    

                if self.gray.isChecked():
                    color = WD_COLOR_INDEX.GRAY_25
                    gray_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Gray highlighted words in page {i + 1}: {gray_words}\nAnd it's {(gray_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= gray_words    

                if self.pink.isChecked():
                    color = WD_COLOR_INDEX.PINK
                    pink_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Pink highlighted words in page {i + 1}: {pink_words}\nAnd it's {(pink_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= pink_words    

                if self.cyan.isChecked():
                    color = WD_COLOR_INDEX.TURQUOISE
                    cyan_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Cyan highlighted words in page {i + 1}: {cyan_words}\nAnd it's {(cyan_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= cyan_words    

                if self.white.isChecked():
                    color = WD_COLOR_INDEX.WHITE
                    white_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"White highlighted words in page {i + 1}: {white_words}\nAnd it's {(white_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= white_words    

                if self.black.isChecked():
                    color = WD_COLOR_INDEX.BLACK
                    black_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Black highlighted words in page {i + 1}: {black_words}\nAnd it's {(black_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= black_words    

                if self.dblue.isChecked():
                    color = WD_COLOR_INDEX.DARK_BLUE
                    dblue_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark blue highlighted words in page {i + 1}: {dblue_words}\nAnd it's {(dblue_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dblue_words    

                if self.dred.isChecked():
                    color = WD_COLOR_INDEX.DARK_RED
                    dred_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark red highlighted words in page {i + 1}: {dred_words}\nAnd it's {(dred_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dred_words    

                if self.dyellow.isChecked():
                    color = WD_COLOR_INDEX.DARK_YELLOW
                    dyellow_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark yellow highlighted words in page {i + 1}: {dyellow_words}\nAnd it's {(dyellow_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dyellow_words    

                if self.dgray.isChecked():
                    color = WD_COLOR_INDEX.GRAY_50
                    dgray_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark gray highlighted words in page {i + 1}: {dgray_words}\nAnd it's {(dgray_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dgray_words    

                if self.dgreen.isChecked():
                    color = WD_COLOR_INDEX.GREEN
                    dgreen_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark green highlighted words in page {i + 1}: {dgreen_words}\nAnd it's {(dgreen_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dgreen_words    

                if self.dcyan.isChecked():
                    color = WD_COLOR_INDEX.TEAL
                    dcyan_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark cyan highlighted words in page {i + 1}: {dcyan_words}\nAnd it's {(dcyan_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dcyan_words    

                if self.dpink.isChecked():
                    color = WD_COLOR_INDEX.VIOLET
                    dpink_words = HighlightCounter(doc=doc, color=color) 
                    output_string = f"Dark pink highlighted words in page {i + 1}: {dpink_words}\nAnd it's {(dpink_words*100)/all_words}% of all words!\n"
                    self.output.append(output_string)
                    other_words -= dpink_words
                output_string = f"Other words in page {i + 1}: {other_words}\nAnd it's {(other_words*100)/all_words}% of all words!"
                self.output.append(output_string)
                remove(f"./wordcount/wordcount_page{i + 1}.docx")
            rmdir("./wordcount")
        except:
            self.output.append("Path of file is in incorrect\n")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
